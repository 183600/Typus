//! dependent_types: on
package main

import "fmt"

// SafeDivide 函数类型 - 在当前实现中简化为普通函数
type SafeDivide func(a, b int) int

// 实际的除法函数，包含运行时检查
func actualDivide(a, b int) int {
    if b == 0 {
        panic("SafeDivide: 除数不能为零")
    }
    return a / b
}

func main() {
    var safeDiv SafeDivide
    safeDiv = actualDivide // 将 actualDivide 赋值给 SafeDivide 类型的变量

    result1 := safeDiv(10, 2)
    fmt.Println("10 / 2 =", result1)

    // 演示运行时检查
    fmt.Println("尝试除以零...")
    defer func() {
        if r := recover(); r != nil {
            fmt.Println("捕获到panic:", r)
        }
    }()
    
    // 这会触发panic，被上面的recover捕获
    safeDiv(5, 0)
}